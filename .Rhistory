dat$OriginalDojoID <- gsub('\\s+$', '', dat$OriginalDojoID, perl=TRUE)
table(dat$OriginalDojoID)
str(dat)
table(dat$Occupation)
str(dat)
table(dat$DojoName)
dat[grepl('fictious', dat$DojoName),]
str(dat)
table(dat$City)
subset(dat, grepl('Homer', City))
subset(dat, is.finite(NumberOfSpecialTrainings))
str(dat)
dat$NumberOfSpecialTrainings <- as.numeric(dat$NumberOfSpecialTrainings)
sort(dat$NumberOfSpecialTrainings)
subset(dat, NumberOfSpecialTrainings > 80)
plot(table(dat$NumberOfSpecialTrainings))
table(dat$NumberOfSpecialTrainings)
dat$NumberOfSpecialTrainings[dat$NumberOfSpecialTrainings > 120, 'NumberOfSpecialTrainings'] <- 1
dat$NumberOfSpecialTrainings[dat$NumberOfSpecialTrainings > 120, 'NumberOfSpecialTrainings'] <- 1
dat[dat$NumberOfSpecialTrainings > 120, 'NumberOfSpecialTrainings'] <- 1
dat$NumberOfSpecialTrainings > 120
dat$NumberOfSpecialTrainings <- as.numeric(dat$NumberOfSpecialTrainings)
dat[dat$NumberOfSpecialTrainings > 120, 'NumberOfSpecialTrainings'] <- 1
dat$NumberOfSpecialTrainings
?as.numeric
dat$NumberOfSpecialTrainings <- as.numeric(dat$NumberOfSpecialTrainings)
dat[!is.finite(NumberOfSpecialTrainings), 'NumberOfSpecialTrainings'] <- 0
dat[!is.finite(dat$NumberOfSpecialTrainings), 'NumberOfSpecialTrainings'] <- 0
dat[dat$NumberOfSpecialTrainings > 120, 'NumberOfSpecialTrainings']   <- 1
table(dat$NumberOfSpecialTrainings)
plot(table(dat$NumberOfSpecialTrainings))
plot(table(dat$NumberOfSpecialTrainings), xlim=c(1,105))
plot(table(dat$NumberOfSpecialTrainings), ylim=c(0,2000))
str(dat)
class(dat$DateAchieved)
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { plot(sort(dat[,aCol])) }
}
par(mfrow=c(4,4))
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { plot(sort(dat[,aCol]), main=aCol) }
}
par(mfrow=c(3,4))
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { plot(sort(dat[,aCol]), main=aCol) }
}
windows()
xyplot(StartDate, CreationDate, data=dat)
colnames(dat)
xyplot(StartDate ~ CreationDate, data=dat)
xyplot(MemberInfoLastModified ~ CreationDate, data=dat)
temp = NULL
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { plot(sort(dat[,aCol]), main=aCol); temp=cbind(temp,dat[,aCol]) }
}
# TODO  - hand clean the DateAchieved
splom(~temp, temp)
str(temp)
temp = data.frame(temp)
splom(~temp, temp)
splom(~temp, temp[sample(nrow(temp), 100),], pch='.', alpha=0.5, pscales=0)
splom(~temp, temp[sample(nrow(temp), 100),], pch='.', alpha=0.2, pscales=0)
plot(sort(dat$DateAchieved))
head(dat$DateAchieved, 30)
as.POSIXct("1900-01-01 PST")
str(as.POSIXct("1900-01-01 PST"))
b = dat$DateAchieved
plot(sort(b))
plot(sort(b[is.finite(b)]))
plot(sort(b[!is.na(b)]))
sample(b)
grid()
tail(sort(b))
head(sort(b))
head(sort(b),30)
grepl('POSIXct', apply(dat, 1, class))
apply(dat, 2, class)
par(mfrow=c(3,4))
temp = NULL
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { 
plot(sort(dat[,aCol]), main=aCol); 
temp=cbind(temp, aCol=dat[,aCol]) }
#str(as.POSIXct("1900-01-01 PST"))
}
temp = data.frame(temp)
str(temp)
par(mfrow=c(3,4))
temp = NULL
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { 
plot(sort(dat[,aCol]), main=aCol); 
temp=data.frame(cbind(temp, aCol=dat[,aCol]))
colnames(temp)[ncol(temp)] = aCol
}
#str(as.POSIXct("1900-01-01 PST"))
}
temp = data.frame(temp)
str(temp)
str(dat)
Sys.date()
sys.date()
sys.time()
Sys.time()
sample(dat$ApplicationDate, 30)
sample(dat$WebsiteLastUpdated, 30)
sample(dat$MemberInfoLastModified, 30)
par(mfrow=c(3,4))
temp = NULL
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { 
inx <- (dat[,aCol] < as.POSIXct("1900-01-01 PST")) | (dat[,aCol] > Sys.time())
dat[inx,aCol] <- as.POSIXct("1900-01-01 PST")
plot(sort(dat[,aCol]), main=aCol); 
temp=data.frame(cbind(temp, aCol=dat[,aCol]))
colnames(temp)[ncol(temp)] = aCol
}
}
inx
which(inx)
par(mfrow=c(3,4))
temp = NULL
for (aCol in colnames(dat)) {
if (class(dat[,aCol])[1] == 'POSIXct') { 
inx <- (dat[,aCol] < as.POSIXct("1900-01-01 PST")) | (dat[,aCol] > Sys.time())
dat[which(inx), aCol] <- as.POSIXct("1900-01-01 PST")
plot(sort(dat[,aCol]), main=aCol); 
temp=data.frame(cbind(temp, aCol=dat[,aCol]))
colnames(temp)[ncol(temp)] = aCol
}
}
splom(~temp[sample(nrow(temp), 100),], temp, pch='.', alpha=0.2, pscales=0)
splom(~temp[sample(nrow(temp), 1000),], temp, pch='.', alpha=0.2, pscales=0)
splom(~temp[sample(nrow(temp), 1000),], temp, pch='.', alpha=0.5, pscales=0)
plot(sort(dat$DuesExpireDate))
plot(sort(dat$DuesExpireDate))
sample(dat$NumberOfSpecialTrainings, 30)
sample(dat$NumberOfSpecialTrainings, 300)
str(dat)
subset(dat, MemberTypeID=='LIFE')
subset(dat, MemberTypeID=='LIFE', select=DuesExpireDate)
Sys.time()
Sys.time()+ 100
Sys.time()+ 100000
Sys.time()+ 365*24*3600
table(dat$MemberTypeID)
dat$DuesExpireDate[dat$MemberTypeID %in% c('LIFE', 'SENSEI', 'HONORARY')]  <- Sys.time() + 365*24*3600
rm(list=ls())
setwd('C:/Users/John/Desktop/DeathCertificates/')
library(lattice)       # graphics
library(latticeExtra)  # graphics
library(plyr)          # Map/Reduce type operations
library(gplots)        # more graphics
library(ggplot2)       # 
library(gtools)        # smartbind  (to bind dfs with different columns)
library(edgeR)         # Good-Turing estimator background for transition matrix
library(MCMCpack)      # Dirichlet sampling
source('GC Methods.R')
source('C:/Users/John/Desktop/R_Scripts/gosink_methods.R')
# -----------------------------------------------
# Start by reading in the Mexico death certificate data.   This supposedly has the data from 1589 Mexican
# subjects.   These are 'gold standard' reviewed documents and 224 of them are noted as being garbage codes.
# Prep the data in the other script file, 'DeathCertificates_Basic_Data_Shaping_and_Storage.R'
load(file='dat.RData')          # Load the (1587x67) data as processed in earlier
load(file='datBayes.RData')     # In development.   Most recent predictions
load(file='icd10Vec.RData')     # 91,737 ICD-10 definitions
load(file='colDesc.RData')      # Descriptions of the column headers (547 headers as a named vector)
source('GC Methods.R')
goodCols <- c(1,4,10,12:17, which(names(dat) %in% c("age", 'ageGroup',"gender", "education", 
"cigsPerDay", 'smokingGroup')))
exclusions  <- c('Stillbirth')  #, 'Poisonings', 'Suicide', 'Diarrhea/Dysentery')
dat1        <- subset(dat[,goodCols], subset=(!(gs_text %in% exclusions)) & (ageGroup == 'Adult'))
retList  <- cvRun(x=dat1, nSamples=25, testFraction=0.25,  nGrams=2, useQ2=TRUE, 
columnNormalize=TRUE,
priorFunction='Good-Turing', constant=.Machine$double.eps)
str(retList, max.level=2); retList.bak = retList
source('GC Methods.R')
goodCols <- c(1,4,10,12:17, which(names(dat) %in% c("age", 'ageGroup',"gender", "education", 
"cigsPerDay", 'smokingGroup')))
exclusions  <- c('Stillbirth')  #, 'Poisonings', 'Suicide', 'Diarrhea/Dysentery')
dat1        <- subset(dat[,goodCols], subset=(!(gs_text %in% exclusions)) & (ageGroup == 'Adult'))
retList  <- cvRun(x=dat1, nSamples=5, testFraction=0.25,  nGrams=2, useQ2=TRUE, 
columnNormalize=TRUE,
priorFunction='Good-Turing', constant=.Machine$double.eps)
str(retList, max.level=2); retList.bak = retList
summary(retList$pCCC)
median(retList$csmf$CSMFAccuracy)   # approx 0.71 for adults
summary(retList$pCCC)
ddply(retList$csmf, .(cause), summarize, median(CCC[is.finite(CCC)]))
with(retList$csmf, median(CCC[is.finite(CCC)]))   # overall or grand median
with(retList$csmf, median(CCC))   # overall or grand median
median(retList$csmf2$CSMFAccuracy)   # approx 0.71 for adults
median(retList$csmf$CSMFAccuracy)   # approx 0.71 for adults
str(retList)
str(retList, max.level=2)
with(retList$csmf, median(CCC[is.finite(CCC)]))   # overall or grand median
with(retList$csmf2, median(CCC[is.finite(CCC)]))   # overall or grand median
source('GC Methods.R')
goodCols <- c(1,4,10,12:17, which(names(dat) %in% c("age", 'ageGroup',"gender", "education", 
"cigsPerDay", 'smokingGroup')))
exclusions  <- c('Stillbirth')  #, 'Poisonings', 'Suicide', 'Diarrhea/Dysentery')
dat1        <- subset(dat[,goodCols], subset=(!(gs_text %in% exclusions)) & (ageGroup == 'Adult'))
retList  <- cvRun(x=dat1, nSamples=5, testFraction=0.25,  nGrams=2, useQ2=TRUE, 
columnNormalize=TRUE,
priorFunction='Good-Turing', constant=.Machine$double.eps)
str(retList, max.level=2); retList.bak = retList
source('GC Methods.R')
goodCols <- c(1,4,10,12:17, which(names(dat) %in% c("age", 'ageGroup',"gender", "education", 
"cigsPerDay", 'smokingGroup')))
exclusions  <- c('Stillbirth')  #, 'Poisonings', 'Suicide', 'Diarrhea/Dysentery')
dat1        <- subset(dat[,goodCols], subset=(!(gs_text %in% exclusions)) & (ageGroup == 'Adult'))
retList  <- cvRun(x=dat1, nSamples=5, testFraction=0.25,  nGrams=2, useQ2=TRUE, 
columnNormalize=TRUE,
priorFunction='Good-Turing', constant=.Machine$double.eps)
str(retList, max.level=2); retList.bak = retList
ddply(retList$csmf, .(cause), summarize, median(CCC[is.finite(CCC)]))
with(retList$csmf, median(CCC[is.finite(CCC)]))   # overall or grand median
summary(retList$pCCC)
median(retList$csmf$CSMFAccuracy)   # approx 0.71 for adults
dir()
load('testingGrid.RData')
testingGrid
pccDat = NULL; pccDat=c(pccDat, 7)
pccDat = c(pccDat, 17)
pccDat
data.frame(pccDat)
data.frame(t(pccDat))
load('testingGrid.RData')
testingGrid
source('GC Methods.R')
goodCols <- c(1,4,10,12:17, which(names(dat) %in% c("age", 'ageGroup',"gender", "education", 
"cigsPerDay", 'smokingGroup')))
exclusions  <- c('Stillbirth')  #, 'Poisonings', 'Suicide', 'Diarrhea/Dysentery')
dat1        <- subset(dat[,goodCols], subset=(!(gs_text %in% exclusions)) & (ageGroup == 'Adult'))
retList  <- cvRun(x=dat1, nSamples=5, testFraction=0.25,  nGrams=2, useQ2=TRUE, 
columnNormalize=TRUE,
priorFunction='Good-Turing', constant=.Machine$double.eps)
str(retList, max.level=2); retList.bak = retList
retList$pCCC
retList$csmf
retList$csmf2
head(retList$bayesDat)
rowSums(head(retList$bayesDat[,10:15])
)
colnames(retList$bayesDat)
rowSums(retList$bayesDat[,6:30])
plot(rowSums(retList$bayesDat[,6:30]))
grid()
x = retList$bayesDat
csmf      = NULL
allCauses = sort(unique(c(x$gs_text, x$inferred)))  # assumes that all causes show up here 1+ times
N         = length(allCauses)
n         = nrow(x)
probCols  = which(colnames(x) %in% allCauses)
probCols
plot(rowSums(retList$bayesDat[,6:32]))
apply(x[1:7,], 1, function(z) { z[probCols] = z[probCols] / sum(z[probCols]); return(z)} ) 
str(x)
apply(x[1:7,], 1, function(z) { z[probCols] = as.numeric(z[probCols]); z[probCols] = z[probCols] / sum(z[probCols]); return(z)} ) 
for (i in 1:nrow(x)) { x[i,probCols] = x[i,probCols] / sum(x[i,probCols], na.rm=TRUE) }
str(x)
x = retList$bayesDat
fn <- function(z, probCols) { 
z[probCols] = as.numeric(z[probCols])
z[probCols] = z[probCols] / sum(z[probCols], na.rm=TRUE)
return(z)
}
apply(x[1:7,], 1, fn(z), probCols=probCols)
apply(x[1:7,], 1, fn, probCols=probCols)
y = x[,probCols]
str(y)
y = matrix(x[,probCols])
str(y)
apply(y[1:7,], 1, function(z) z = z/sum(z))
apply(y[1:7,], 1, function(z) { z = z/sum(z)} )
apply(y[1:7,], 1, function(z) { str(z) } )
str(y)
apply(y[1:7,], 1, function(z), { str(z) } )
apply(y[1:7,], 1, function(z) { str(z) } )
apply(y[1:7,], 1, function(z) { length(z) } )
?apply
normFunction <- function(z) { z = z/sum(z, na.rm=TRUE); return(z) }
apply(y[1:7,], 1, normFunction)
apply(y[1:7,], 1, normFunction(z))
normFunction(1:5)
apply(y[1:7,], 1, normFunction)
traceback()
apply(y[1:7,], 1, function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
apply(y, 1, function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
y = as.matrix(x[,probCols]); str(y)
apply(y[1:8,], 1, function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
x[,probCols] <- apply(as.matrix(x[,probCols]), 1, function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
str(x)
csmfCount <- function(x) {
csmf      = NULL
allCauses = sort(unique(c(x$gs_text, x$inferred)))  # assumes that all causes show up here 1+ times
N         = length(allCauses)
n         = nrow(x)
probCols  = which(colnames(x) %in% allCauses)
#for (i in 1:nrow(x)) { x[i,probCols] = x[i,probCols] / sum(x[i,probCols], na.rm=TRUE) }
fn <- function(z, probCols) { 
z[probCols] = as.numeric(z[probCols])
z[probCols] = z[probCols] / sum(z[probCols], na.rm=TRUE)
return(z)
}
x[,probCols] <- apply(as.matrix(x[,probCols]), 1, 
function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
for (aCause in allCauses) {
inx1     = (x$gs_text == aCause)
obs      = sum(inx1)
obsFrac  = obs / n    
pred     = sum(x[,aCause])
predFrac = pred / n
truePos  = pred   
falseNeg = obs - pred 
CCC      = ( (truePos / (truePos+falseNeg)) - (1/N) )  / (1 - (1/N))
score    = pred / obs    # not needed??
csmf     = rbind(csmf, data.frame(cause=aCause, obs=obs, obsFrac=obsFrac, 
pred=pred, predFrac=predFrac,
CCC=CCC, score=score, stringsAsFactors=FALSE))
}
return(csmf)
}
csmfCount(retList$bayesDat[1:50,])
retList$bayesDat[1:50,]
csmfCount <- function(x) {
csmf      = NULL
allCauses = sort(unique(c(x$gs_text, x$inferred)))  # assumes that all causes show up here 1+ times
N         = length(allCauses)
n         = nrow(x)
probCols  = which(colnames(x) %in% allCauses)
#for (i in 1:nrow(x)) { x[i,probCols] = x[i,probCols] / sum(x[i,probCols], na.rm=TRUE) }
fn <- function(z, probCols) { 
z[probCols] = as.numeric(z[probCols])
z[probCols] = z[probCols] / sum(z[probCols], na.rm=TRUE)
return(z)
}
x[,probCols] <- apply(as.matrix(x[,probCols]), 1, 
function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
for (aCause in allCauses) {
obs      = sum(x$gs_text == aCause)
obsFrac  = obs / n    
pred     = sum(x[,aCause])
predFrac = pred / n
truePos  = pred   
falseNeg = obs - pred 
CCC      = ( (truePos / (truePos+falseNeg)) - (1/N) )  / (1 - (1/N))
score    = pred / obs    # not needed??
csmf     = rbind(csmf, data.frame(cause=aCause, obs=obs, obsFrac=obsFrac, 
pred=pred, predFrac=predFrac,
CCC=CCC, score=score, stringsAsFactors=FALSE))
}
return(csmf)
}
csmfCount(retList$bayesDat[1:50,])
source('GC Methods.R')
source('GC Methods.R')
csmfCount(retList$bayesDat[1:50,])
source('GC Methods.R')
str(x)
retList$bayesDat[1:50,]
source('GC Methods.R')
csmfCount(retList$bayesDat[1:50,])
sum(retList$bayesDat[1:50,'Pneumonia'])
source('GC Methods.R')
str(retList)
1606/5
csmfCount(retList$bayesDat[1:321,])
csmfCount(retList$bayesDat[retList$bayesDat$cvReplicate==1,])
x = retList$bayesDat
x = subset(retList$bayesDat, cvReplicate==1)
str(x)
csmfCount <- function(x) {
csmf      = NULL
allCauses = sort(unique(c(x$gs_text, x$inferred)))  # assumes that all causes show up here 1+ times
N         = length(allCauses)
n         = nrow(x)
probCols  = which(colnames(x) %in% allCauses)
#for (i in 1:nrow(x)) { x[i,probCols] = x[i,probCols] / sum(x[i,probCols], na.rm=TRUE) }
fn <- function(z, probCols) { 
z[probCols] = as.numeric(z[probCols])
z[probCols] = z[probCols] / sum(z[probCols], na.rm=TRUE)
return(z)
}
x[,probCols] <- apply(as.matrix(x[,probCols]), 1, 
function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
for (aCause in allCauses) {
obs      = sum(x$gs_text == aCause)
obsFrac  = obs / n    
pred     = sum(x[,aCause])
predFrac = pred / n
cat(aCause, obs, obsFrac, pred, predFrac, '\n')
truePos  = pred   
falseNeg = obs - pred 
CCC      = ( (truePos / (truePos+falseNeg)) - (1/N) )  / (1 - (1/N))
score    = pred / obs    # not needed??
csmf     = rbind(csmf, data.frame(cause=aCause, obs=obs, obsFrac=obsFrac, 
pred=pred, predFrac=predFrac,
CCC=CCC, score=score, stringsAsFactors=FALSE))
}
return(csmf)
}
csmfCount(x)
sum(x$Stomach.Cancer)
sum(x$Stroke)
sum(x$AIDS)
csmf      = NULL
allCauses = sort(unique(c(x$gs_text, x$inferred)))  # assumes that all causes show up here 1+ times
N         = length(allCauses)
n         = nrow(x)
probCols  = which(colnames(x) %in% allCauses)
#for (i in 1:nrow(x)) { x[i,probCols] = x[i,probCols] / sum(x[i,probCols], na.rm=TRUE) }
fn <- function(z, probCols) { 
z[probCols] = as.numeric(z[probCols])
z[probCols] = z[probCols] / sum(z[probCols], na.rm=TRUE)
return(z)
}
x[,probCols] <- apply(as.matrix(x[,probCols]), 1, 
function(z) { z = z/sum(z, na.rm=TRUE); return(z) })
sum(x$Stroke)
sum(x$AIDS)
x
str(x
)
x$matchPosition = apply(x, 1, function(z) { match(z['gs_text'], 
names(z[probCols])[order(as.numeric(z[probCols]), decreasing=TRUE)]) })
str(8)
str(x)
head(x)
subset(x, sid==967)
subset(retList$datBayes, sid==967)
subset(retList$bayesDat, sid==967)
subset(retList$bayesDat, sid==77)
subset(retList$bayesDat, sid==177)
subset(retList$bayesDat, sid==277)
subset(retList$bayesDat, sid==377)
summary(retList$pCCC)
source('GC Methods.R')
csmfCount(retList$bayesDat[retList$bayesDat$cvReplicate==1,])
csmfCount(retList$bayesDat[retList$bayesDat$cvReplicate==3,])
13*25
csmfCount(subset(retList$bayesDat, cvReplicate==3))
subset(retList$bayesDat, cvReplicate==3)
table(subset(retList$bayesDat, cvReplicate==3)$gs_text)
csmfCount(subset(retList$bayesDat, cvReplicate==3))
x=subset(retList$bayesDat, cvReplicate==3)
allCauses
colSums(x[,allCauses])
table(subset(retList$bayesDat, cvReplicate==3)$gs_text)
source('GC Methods.R')
csmfCount(subset(retList$bayesDat, cvReplicate==3))
source('GC Methods.R')
y_true = c('Stroke', 'Stroke', 'Stroke')
y_pred = c('Diabetes', 'Other', 'Diabetes')
calculateCSMFAccuracy(inferred=y_pred, observed=y_true)  #csmf_accuracy = 0.0
y_true = c('Stroke', 'Diabetes', 'Other')
y_pred = c('Diabetes', 'Other', 'Stroke')
calculateCSMFAccuracy(inferred=y_pred, observed=y_true)  #csmf_accuracy = 1.0
y_true = c(1, 5, 3, 4, 1, 1, 5, 4, 1, 2)
y_pred = c(2, 5, 5, 5, 2, 4, 1, 3, 5, 3)
calculateCSMFAccuracy(inferred=y_pred, observed=y_true)   #csmf_accuracy = 0.555555555556
y_true = c(6,  7, 19,  6,  9, 14, 10, 18,  4,  2)
y_pred = c(0, 14, 12,  1, 11,  4, 13,  3, 15, 14)
calculateCSMFAccuracy(inferred=y_pred, observed=y_true)   #csmf_accuracy = 0.2
y_true = [3, 4, 3, 4, 5, 5, 2, 5, 2, 5]
source('GC Methods.R')
y_true = ('Stroke', 'Diabetes', 'Other')
y_pred = ('Stroke', 'Other', 'Diabetes')    # ccc = 0.0
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = ('Stroke', 'Diabetes', 'Other')
y_pred = ('Diabetes', 'Other', 'Stroke')    # ccc = -0.5
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = (3, 4, 3, 4, 5, 5, 2, 5, 2, 5)
y_pred = (2, 2, 4, 5, 3, 4, 3, 2, 4, 2)              # ccc = -0.333333333333
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = (15,  1, 16,  1,  6,  7, 18,  9,  3, 14)
y_pred = (16,  3,  3,  7,  6, 11,  0,  2,  2, 16)    # ccc = 0.0181818181818
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c('Stroke', 'Diabetes', 'Other')
y_pred = c('Stroke', 'Other', 'Diabetes')    # ccc = 0.0
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c('Stroke', 'Diabetes', 'Other')
y_pred = c('Diabetes', 'Other', 'Stroke')    # ccc = -0.5
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c(3, 4, 3, 4, 5, 5, 2, 5, 2, 5)
y_pred = c(2, 2, 4, 5, 3, 4, 3, 2, 4, 2)              # ccc = -0.333333333333
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c(15,  1, 16,  1,  6,  7, 18,  9,  3, 14)
y_pred = c(16,  3,  3,  7,  6, 11,  0,  2,  2, 16)    # ccc = 0.0181818181818
calculateCSMF(inferred=y_pred, observed=y_true)
calculateCSMF(inferred=y_pred, observed=y_true)$CCC
median(calculateCSMF(inferred=y_pred, observed=y_true)$CCC)
a=calculateCSMF(inferred=y_pred, observed=y_true)$CCC
median(a[is.finite(a)])
source('GC Methods.R')
calculateCSMF(inferred=y_pred, observed=y_true)
source('GC Methods.R')
y_true = c('Stroke', 'Diabetes', 'Other')
y_pred = c('Stroke', 'Other', 'Diabetes')    # ccc = 0.0
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c('Stroke', 'Diabetes', 'Other')
y_pred = c('Diabetes', 'Other', 'Stroke')    # ccc = -0.5
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c(3, 4, 3, 4, 5, 5, 2, 5, 2, 5)
y_pred = c(2, 2, 4, 5, 3, 4, 3, 2, 4, 2)              # ccc = -0.333333333333
calculateCSMF(inferred=y_pred, observed=y_true)
y_true = c(15,  1, 16,  1,  6,  7, 18,  9,  3, 14)
y_pred = c(16,  3,  3,  7,  6, 11,  0,  2,  2, 16)    # ccc = 0.0181818181818
calculateCSMF(inferred=y_pred, observed=y_true)
median(c(-.5, -.5, 1))
mean(c(-.5, -.5, 1))
q()
